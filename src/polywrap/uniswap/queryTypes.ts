// NOTE: This is generated by 'w3 codegen', DO NOT MODIFY

// @ts-noCheck
import { BigInt, Int32 } from '../baseTypes'
import {
  AddLiquidityOptions,
  BestTradeOptions,
  ChainId,
  ClaimOptions,
  CollectOptions,
  Currency,
  FeeAmount,
  FeeOptions,
  FullWithdrawOptions,
  IncentiveKey,
  PermitOptions,
  PermitV,
  Pool,
  Position,
  Price,
  QuoteOptions,
  RemoveLiquidityOptions,
  Route,
  SafeTransferOptions,
  SwapOptions,
  Tick,
  TickListDataProvider,
  Token,
  TokenAmount,
  Trade,
  TradeRoute,
  TradeSwap,
  TradeType,
} from './types'

export interface Input_currencyEquals extends Record<string, unknown> {
  currencyA: Currency
  currencyB: Currency
}

export interface Input_tokenEquals extends Record<string, unknown> {
  tokenA: Token
  tokenB: Token
}

export interface Input_tokenAmountEquals extends Record<string, unknown> {
  tokenAmountA: TokenAmount
  tokenAmountB: TokenAmount
}

export interface Input_tokenSortsBefore extends Record<string, unknown> {
  tokenA: Token
  tokenB: Token
}

export interface Input_getEther extends Record<string, unknown> {
  chainId: ChainId
}

export interface Input_getWETH extends Record<string, unknown> {
  chainId: ChainId
}

export interface Input_isEther extends Record<string, unknown> {
  token: Token
}

export interface Input_wrapToken extends Record<string, unknown> {
  token: Token
}

export interface Input_wrapAmount extends Record<string, unknown> {
  amount: TokenAmount
}

export interface Input_createTickListDataProvider extends Record<string, unknown> {
  ticks: Array<Tick>
  tickSpacing: Int32
}

export interface Input_getTick extends Record<string, unknown> {
  tickDataProvider: TickListDataProvider
  tickIndex: Int32
}

export interface Input_nextInitializedTickWithinOneWord extends Record<string, unknown> {
  tickDataProvider: TickListDataProvider
  tick: Int32
  lte: boolean
  tickSpacing: Int32
}

export interface Input_createPool extends Record<string, unknown> {
  tokenA: Token
  tokenB: Token
  fee: FeeAmount
  sqrtRatioX96: BigInt
  liquidity: BigInt
  tickCurrent: Int32
  ticks?: TickListDataProvider | null
}

export interface Input_getPoolAddress extends Record<string, unknown> {
  tokenA: Token
  tokenB: Token
  fee: FeeAmount
  initCodeHashManualOverride?: string | null
}

export interface Input_poolInvolvesToken extends Record<string, unknown> {
  pool: Pool
  token: Token
}

export interface Input_poolToken0Price extends Record<string, unknown> {
  pool: Pool
}

export interface Input_poolToken1Price extends Record<string, unknown> {
  pool: Pool
}

export interface Input_poolPriceOf extends Record<string, unknown> {
  pool: Pool
  token: Token
}

export interface Input_poolChainId extends Record<string, unknown> {
  pool: Pool
}

export interface Input_getPoolOutputAmount extends Record<string, unknown> {
  pool: Pool
  inputAmount: TokenAmount
  sqrtPriceLimitX96?: BigInt | null
}

export interface Input_getPoolInputAmount extends Record<string, unknown> {
  pool: Pool
  outputAmount: TokenAmount
  sqrtPriceLimitX96?: BigInt | null
}

export interface Input_getPoolTickSpacing extends Record<string, unknown> {
  pool: Pool
}

export interface Input_createRoute extends Record<string, unknown> {
  pools: Array<Pool>
  inToken: Token
  outToken: Token
}

export interface Input_routeChainId extends Record<string, unknown> {
  route: Route
}

export interface Input_routeMidPrice extends Record<string, unknown> {
  route: Route
}

export interface Input_createTradeExactIn extends Record<string, unknown> {
  tradeRoute: TradeRoute
}

export interface Input_createTradeExactOut extends Record<string, unknown> {
  tradeRoute: TradeRoute
}

export interface Input_createTradeFromRoute extends Record<string, unknown> {
  tradeRoute: TradeRoute
  tradeType: TradeType
}

export interface Input_createTradeFromRoutes extends Record<string, unknown> {
  tradeRoutes: Array<TradeRoute>
  tradeType: TradeType
}

export interface Input_createUncheckedTrade extends Record<string, unknown> {
  swap: TradeSwap
  tradeType: TradeType
}

export interface Input_createUncheckedTradeWithMultipleRoutes extends Record<string, unknown> {
  swaps: Array<TradeSwap>
  tradeType: TradeType
}

export interface Input_tradeInputAmount extends Record<string, unknown> {
  swaps: Array<TradeSwap>
}

export interface Input_tradeOutputAmount extends Record<string, unknown> {
  swaps: Array<TradeSwap>
}

export interface Input_tradeExecutionPrice extends Record<string, unknown> {
  inputAmount: TokenAmount
  outputAmount: TokenAmount
}

export interface Input_tradePriceImpact extends Record<string, unknown> {
  swaps: Array<TradeSwap>
  outputAmount: TokenAmount
}

export interface Input_tradeMinimumAmountOut extends Record<string, unknown> {
  slippageTolerance: string
  amountOut: TokenAmount
  tradeType: TradeType
}

export interface Input_tradeMaximumAmountIn extends Record<string, unknown> {
  slippageTolerance: string
  amountIn: TokenAmount
  tradeType: TradeType
}

export interface Input_tradeWorstExecutionPrice extends Record<string, unknown> {
  trade: Trade
  slippageTolerance: string
}

export interface Input_bestTradeExactIn extends Record<string, unknown> {
  pools: Array<Pool>
  amountIn: TokenAmount
  tokenOut: Token
  options?: BestTradeOptions | null
}

export interface Input_bestTradeExactOut extends Record<string, unknown> {
  pools: Array<Pool>
  tokenIn: Token
  amountOut: TokenAmount
  options?: BestTradeOptions | null
}

export interface Input_createPosition extends Record<string, unknown> {
  pool: Pool
  tickLower: Int32
  tickUpper: Int32
  liquidity: BigInt
}

export interface Input_createPositionFromAmounts extends Record<string, unknown> {
  pool: Pool
  tickLower: Int32
  tickUpper: Int32
  amount0: BigInt
  amount1: BigInt
  useFullPrecision: boolean
}

export interface Input_createPositionFromAmount0 extends Record<string, unknown> {
  pool: Pool
  tickLower: Int32
  tickUpper: Int32
  amount0: BigInt
  useFullPrecision: boolean
}

export interface Input_createPositionFromAmount1 extends Record<string, unknown> {
  pool: Pool
  tickLower: Int32
  tickUpper: Int32
  amount1: BigInt
}

export interface Input_positionToken0PriceLower extends Record<string, unknown> {
  position: Position
}

export interface Input_positionToken0PriceUpper extends Record<string, unknown> {
  position: Position
}

export interface Input_positionAmount0 extends Record<string, unknown> {
  position: Position
}

export interface Input_positionAmount1 extends Record<string, unknown> {
  position: Position
}

export interface Input_mintAmounts extends Record<string, unknown> {
  position: Position
}

export interface Input_mintAmountsWithSlippage extends Record<string, unknown> {
  position: Position
  slippageTolerance: string
}

export interface Input_burnAmountsWithSlippage extends Record<string, unknown> {
  position: Position
  slippageTolerance: string
}

export interface Input_swapCallParameters extends Record<string, unknown> {
  trades: Array<Trade>
  options: SwapOptions
}

export interface Input_encodeRouteToPath extends Record<string, unknown> {
  route: Route
  exactOutput: boolean
}

export interface Input_encodePermit extends Record<string, unknown> {
  token: Token
  options: PermitOptions
}

export interface Input_encodeUnwrapWETH9 extends Record<string, unknown> {
  amountMinimum: BigInt
  recipient: string
  feeOptions?: FeeOptions | null
}

export interface Input_encodeSweepToken extends Record<string, unknown> {
  token: Token
  amountMinimum: BigInt
  recipient: string
  feeOptions?: FeeOptions | null
}

export type Input_encodeRefundETH = Record<string, unknown>

export interface Input_encodeMulticall extends Record<string, unknown> {
  calldatas: Array<string>
}

export interface Input_collectRewards extends Record<string, unknown> {
  incentiveKeys: Array<IncentiveKey>
  options: ClaimOptions
}

export interface Input_withdrawToken extends Record<string, unknown> {
  incentiveKeys: Array<IncentiveKey>
  options: FullWithdrawOptions
}

export interface Input_encodeDeposit extends Record<string, unknown> {
  incentiveKeys: Array<IncentiveKey>
}

export interface Input_quoteCallParameters extends Record<string, unknown> {
  route: Route
  amount: TokenAmount
  tradeType: TradeType
  options?: QuoteOptions | null
}

export interface Input_createCallParameters extends Record<string, unknown> {
  pool: Pool
}

export interface Input_addCallParameters extends Record<string, unknown> {
  position: Position
  options: AddLiquidityOptions
}

export interface Input_collectCallParameters extends Record<string, unknown> {
  options: CollectOptions
}

export interface Input_removeCallParameters extends Record<string, unknown> {
  position: Position
  options: RemoveLiquidityOptions
}

export interface Input_safeTransferFromParameters extends Record<string, unknown> {
  options: SafeTransferOptions
}

export interface Input_toHex extends Record<string, unknown> {
  value: BigInt
}

export interface Input_computePoolAddress extends Record<string, unknown> {
  factoryAddress: string
  tokenA: Token
  tokenB: Token
  fee: FeeAmount
  initCodeHashManualOverride?: string | null
}

export interface Input_encodeSqrtRatioX96 extends Record<string, unknown> {
  amount1: BigInt
  amount0: BigInt
}

export interface Input_mulDivRoundingUp extends Record<string, unknown> {
  a: BigInt
  b: BigInt
  denominator: BigInt
}

export interface Input_addDelta extends Record<string, unknown> {
  x: BigInt
  y: BigInt
}

export interface Input_maxLiquidityForAmounts extends Record<string, unknown> {
  sqrtRatioCurrentX96: BigInt
  sqrtRatioAX96: BigInt
  sqrtRatioBX96: BigInt
  amount0: BigInt
  amount1: BigInt
  useFullPrecision: boolean
}

export interface Input_mostSignificantBit extends Record<string, unknown> {
  x: BigInt
}

export interface Input_nearestUsableTick extends Record<string, unknown> {
  tick: Int32
  tickSpacing: Int32
}

export interface Input_tickToPrice extends Record<string, unknown> {
  baseToken: Token
  quoteToken: Token
  tick: Int32
}

export interface Input_priceToClosestTick extends Record<string, unknown> {
  price: Price
}

export interface Input_getAmount0Delta extends Record<string, unknown> {
  sqrtRatioAX96: BigInt
  sqrtRatioBX96: BigInt
  liquidity: BigInt
  roundUp: boolean
}

export interface Input_getAmount1Delta extends Record<string, unknown> {
  sqrtRatioAX96: BigInt
  sqrtRatioBX96: BigInt
  liquidity: BigInt
  roundUp: boolean
}

export interface Input_getNextSqrtPriceFromInput extends Record<string, unknown> {
  sqrtPX96: BigInt
  liquidity: BigInt
  amountIn: BigInt
  zeroForOne: boolean
}

export interface Input_getNextSqrtPriceFromOutput extends Record<string, unknown> {
  sqrtPX96: BigInt
  liquidity: BigInt
  amountOut: BigInt
  zeroForOne: boolean
}

export interface Input_validateTickList extends Record<string, unknown> {
  ticks: Array<Tick>
  tickSpacing: Int32
}

export interface Input_tickIsBelowSmallest extends Record<string, unknown> {
  ticks: Array<Tick>
  tick: Int32
}

export interface Input_tickIsAtOrAboveLargest extends Record<string, unknown> {
  ticks: Array<Tick>
  tick: Int32
}

export interface Input_nextInitializedTick extends Record<string, unknown> {
  ticks: Array<Tick>
  tick: Int32
  lte: boolean
}

export interface Input_tickListIsSorted extends Record<string, unknown> {
  ticks: Array<Tick>
}

export interface Input_getSqrtRatioAtTick extends Record<string, unknown> {
  tick: Int32
}

export interface Input_getTickAtSqrtRatio extends Record<string, unknown> {
  sqrtRatioX96: BigInt
}

export interface Input_fetchToken extends Record<string, unknown> {
  address: string
  chainId: ChainId
}

export interface Input_fetchPoolFromTokens extends Record<string, unknown> {
  tokenA: Token
  tokenB: Token
  fee: FeeAmount
  fetchTicks: boolean
}

export interface Input_fetchPoolFromAddress extends Record<string, unknown> {
  address: string
  chainId: ChainId
  fetchTicks: boolean
}

export interface Input_fetchTickList extends Record<string, unknown> {
  address: string
  chainId: ChainId
}

export interface Input_feeAmountToTickSpacing extends Record<string, unknown> {
  feeAmount: FeeAmount
}

export interface Input_getFeeAmount extends Record<string, unknown> {
  feeAmount: FeeAmount
}

export interface Input_getPermitV extends Record<string, unknown> {
  permitV: PermitV
}

export type Input_FACTORY_ADDRESS = Record<string, unknown>

export type Input_POOL_INIT_CODE_HASH = Record<string, unknown>

export type Input_POOL_INIT_CODE_HASH_OPTIMISM = Record<string, unknown>

export type Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN = Record<string, unknown>

export type Input_MIN_TICK = Record<string, unknown>

export type Input_MAX_TICK = Record<string, unknown>

export type Input_MIN_SQRT_RATIO = Record<string, unknown>

export type Input_MAX_SQRT_RATIO = Record<string, unknown>
