// NOTE: This is generated by 'w3 codegen', DO NOT MODIFY

// @ts-noCheck
import {
  UInt,
  UInt8,
  UInt16,
  UInt32,
  Int,
  Int8,
  Int16,
  Int32,
  Bytes,
  BigInt,
  Json,
  String,
  Boolean
} from "../baseTypes";
import {
  Currency,
  Token,
  Route,
  Tick,
  TickListDataProvider,
  Pool,
  Trade,
  TokenAmount,
  TradeSwap,
  Price,
  SwapOptions,
  PermitOptions,
  FeeOptions,
  MethodParameters,
  GasOptions,
  NextTickResult,
  PoolChangeResult,
  TradeRoute,
  IncentiveKey,
  ClaimOptions,
  FullWithdrawOptions,
  QuoteOptions,
  CommonAddLiquidityOptions,
  AddLiquidityOptions,
  SafeTransferOptions,
  CollectOptions,
  NFTPermitOptions,
  RemoveLiquidityOptions,
  BestTradeOptions,
  Position,
  MintAmounts,
  ChainIdEnum,
  ChainIdString,
  ChainId,
  FeeAmountEnum,
  FeeAmountString,
  FeeAmount,
  TradeTypeEnum,
  TradeTypeString,
  TradeType,
  PermitVEnum,
  PermitVString,
  PermitV,
  RoundingEnum,
  RoundingString,
  Rounding,
  Ethereum_Connection,
  Ethereum_TxOverrides,
  Ethereum_TxResponse,
  Ethereum_Access,
  Ethereum_TxReceipt,
  Ethereum_Log,
  Ethereum_TxRequest,
  Ethereum_StaticTxResult,
  Ethereum_EventNotification,
  Ethereum_Network,
  ERC20_Ethereum_Connection,
  Ethereum_Mutation,
  Ethereum_Query,
  SHA3_Query,
  EthersSolidity_Query,
  ERC20_Query,
  Subgraph_Query,
} from "./types";
import { Client, Uri, ExtensionInvocation, InvokeApiOptions } from "@web3api/core-js";

import * as Query from "./queryTypes";

export interface UniswapQueryModule {
  currencyEquals(input: Query.Input_currencyEquals): ExtensionInvocation<Boolean>;
  tokenEquals(input: Query.Input_tokenEquals): ExtensionInvocation<Boolean>;
  tokenAmountEquals(input: Query.Input_tokenAmountEquals): ExtensionInvocation<Boolean>;
  tokenSortsBefore(input: Query.Input_tokenSortsBefore): ExtensionInvocation<Boolean>;
  getEther(input: Query.Input_getEther): ExtensionInvocation<Token>;
  getWETH(input: Query.Input_getWETH): ExtensionInvocation<Token>;
  isEther(input: Query.Input_isEther): ExtensionInvocation<Boolean>;
  wrapToken(input: Query.Input_wrapToken): ExtensionInvocation<Token>;
  wrapAmount(input: Query.Input_wrapAmount): ExtensionInvocation<TokenAmount>;
  createTickListDataProvider(input: Query.Input_createTickListDataProvider): ExtensionInvocation<TickListDataProvider>;
  getTick(input: Query.Input_getTick): ExtensionInvocation<Tick>;
  nextInitializedTickWithinOneWord(input: Query.Input_nextInitializedTickWithinOneWord): ExtensionInvocation<NextTickResult>;
  createPool(input: Query.Input_createPool): ExtensionInvocation<Pool>;
  getPoolAddress(input: Query.Input_getPoolAddress): ExtensionInvocation<String>;
  poolInvolvesToken(input: Query.Input_poolInvolvesToken): ExtensionInvocation<Boolean>;
  poolToken0Price(input: Query.Input_poolToken0Price): ExtensionInvocation<Price>;
  poolToken1Price(input: Query.Input_poolToken1Price): ExtensionInvocation<Price>;
  poolPriceOf(input: Query.Input_poolPriceOf): ExtensionInvocation<Price>;
  poolChainId(input: Query.Input_poolChainId): ExtensionInvocation<ChainId>;
  getPoolOutputAmount(input: Query.Input_getPoolOutputAmount): ExtensionInvocation<PoolChangeResult>;
  getPoolInputAmount(input: Query.Input_getPoolInputAmount): ExtensionInvocation<PoolChangeResult>;
  getPoolTickSpacing(input: Query.Input_getPoolTickSpacing): ExtensionInvocation<Int32>;
  createRoute(input: Query.Input_createRoute): ExtensionInvocation<Route>;
  routeChainId(input: Query.Input_routeChainId): ExtensionInvocation<ChainId>;
  routeMidPrice(input: Query.Input_routeMidPrice): ExtensionInvocation<Price>;
  createTradeExactIn(input: Query.Input_createTradeExactIn): ExtensionInvocation<Trade>;
  createTradeExactOut(input: Query.Input_createTradeExactOut): ExtensionInvocation<Trade>;
  createTradeFromRoute(input: Query.Input_createTradeFromRoute): ExtensionInvocation<Trade>;
  createTradeFromRoutes(input: Query.Input_createTradeFromRoutes): ExtensionInvocation<Trade>;
  createUncheckedTrade(input: Query.Input_createUncheckedTrade): ExtensionInvocation<Trade>;
  createUncheckedTradeWithMultipleRoutes(input: Query.Input_createUncheckedTradeWithMultipleRoutes): ExtensionInvocation<Trade>;
  tradeInputAmount(input: Query.Input_tradeInputAmount): ExtensionInvocation<TokenAmount>;
  tradeOutputAmount(input: Query.Input_tradeOutputAmount): ExtensionInvocation<TokenAmount>;
  tradeExecutionPrice(input: Query.Input_tradeExecutionPrice): ExtensionInvocation<Price>;
  tradePriceImpact(input: Query.Input_tradePriceImpact): ExtensionInvocation<String>;
  tradeMinimumAmountOut(input: Query.Input_tradeMinimumAmountOut): ExtensionInvocation<TokenAmount>;
  tradeMaximumAmountIn(input: Query.Input_tradeMaximumAmountIn): ExtensionInvocation<TokenAmount>;
  tradeWorstExecutionPrice(input: Query.Input_tradeWorstExecutionPrice): ExtensionInvocation<Price>;
  bestTradeExactIn(input: Query.Input_bestTradeExactIn): ExtensionInvocation<Array<Trade>>;
  bestTradeExactOut(input: Query.Input_bestTradeExactOut): ExtensionInvocation<Array<Trade>>;
  createPosition(input: Query.Input_createPosition): ExtensionInvocation<Position>;
  createPositionFromAmounts(input: Query.Input_createPositionFromAmounts): ExtensionInvocation<Position>;
  createPositionFromAmount0(input: Query.Input_createPositionFromAmount0): ExtensionInvocation<Position>;
  createPositionFromAmount1(input: Query.Input_createPositionFromAmount1): ExtensionInvocation<Position>;
  positionToken0PriceLower(input: Query.Input_positionToken0PriceLower): ExtensionInvocation<Price>;
  positionToken0PriceUpper(input: Query.Input_positionToken0PriceUpper): ExtensionInvocation<Price>;
  positionAmount0(input: Query.Input_positionAmount0): ExtensionInvocation<TokenAmount>;
  positionAmount1(input: Query.Input_positionAmount1): ExtensionInvocation<TokenAmount>;
  mintAmounts(input: Query.Input_mintAmounts): ExtensionInvocation<MintAmounts>;
  mintAmountsWithSlippage(input: Query.Input_mintAmountsWithSlippage): ExtensionInvocation<MintAmounts>;
  burnAmountsWithSlippage(input: Query.Input_burnAmountsWithSlippage): ExtensionInvocation<MintAmounts>;
  swapCallParameters(input: Query.Input_swapCallParameters): ExtensionInvocation<MethodParameters>;
  encodeRouteToPath(input: Query.Input_encodeRouteToPath): ExtensionInvocation<String>;
  encodePermit(input: Query.Input_encodePermit): ExtensionInvocation<String>;
  encodeUnwrapWETH9(input: Query.Input_encodeUnwrapWETH9): ExtensionInvocation<String>;
  encodeSweepToken(input: Query.Input_encodeSweepToken): ExtensionInvocation<String>;
  encodeRefundETH(input: Query.Input_encodeRefundETH): ExtensionInvocation<String>;
  encodeMulticall(input: Query.Input_encodeMulticall): ExtensionInvocation<String>;
  collectRewards(input: Query.Input_collectRewards): ExtensionInvocation<MethodParameters>;
  withdrawToken(input: Query.Input_withdrawToken): ExtensionInvocation<MethodParameters>;
  encodeDeposit(input: Query.Input_encodeDeposit): ExtensionInvocation<String>;
  quoteCallParameters(input: Query.Input_quoteCallParameters): ExtensionInvocation<MethodParameters>;
  createCallParameters(input: Query.Input_createCallParameters): ExtensionInvocation<MethodParameters>;
  addCallParameters(input: Query.Input_addCallParameters): ExtensionInvocation<MethodParameters>;
  collectCallParameters(input: Query.Input_collectCallParameters): ExtensionInvocation<MethodParameters>;
  removeCallParameters(input: Query.Input_removeCallParameters): ExtensionInvocation<MethodParameters>;
  safeTransferFromParameters(input: Query.Input_safeTransferFromParameters): ExtensionInvocation<MethodParameters>;
  toHex(input: Query.Input_toHex): ExtensionInvocation<String>;
  computePoolAddress(input: Query.Input_computePoolAddress): ExtensionInvocation<String>;
  encodeSqrtRatioX96(input: Query.Input_encodeSqrtRatioX96): ExtensionInvocation<BigInt>;
  mulDivRoundingUp(input: Query.Input_mulDivRoundingUp): ExtensionInvocation<BigInt>;
  addDelta(input: Query.Input_addDelta): ExtensionInvocation<BigInt>;
  maxLiquidityForAmounts(input: Query.Input_maxLiquidityForAmounts): ExtensionInvocation<BigInt>;
  mostSignificantBit(input: Query.Input_mostSignificantBit): ExtensionInvocation<UInt32>;
  nearestUsableTick(input: Query.Input_nearestUsableTick): ExtensionInvocation<Int32>;
  tickToPrice(input: Query.Input_tickToPrice): ExtensionInvocation<Price>;
  priceToClosestTick(input: Query.Input_priceToClosestTick): ExtensionInvocation<Int32>;
  getAmount0Delta(input: Query.Input_getAmount0Delta): ExtensionInvocation<BigInt>;
  getAmount1Delta(input: Query.Input_getAmount1Delta): ExtensionInvocation<BigInt>;
  getNextSqrtPriceFromInput(input: Query.Input_getNextSqrtPriceFromInput): ExtensionInvocation<BigInt>;
  getNextSqrtPriceFromOutput(input: Query.Input_getNextSqrtPriceFromOutput): ExtensionInvocation<BigInt>;
  validateTickList(input: Query.Input_validateTickList): ExtensionInvocation<Boolean>;
  tickIsBelowSmallest(input: Query.Input_tickIsBelowSmallest): ExtensionInvocation<Boolean>;
  tickIsAtOrAboveLargest(input: Query.Input_tickIsAtOrAboveLargest): ExtensionInvocation<Boolean>;
  nextInitializedTick(input: Query.Input_nextInitializedTick): ExtensionInvocation<Tick>;
  tickListIsSorted(input: Query.Input_tickListIsSorted): ExtensionInvocation<Boolean>;
  getSqrtRatioAtTick(input: Query.Input_getSqrtRatioAtTick): ExtensionInvocation<BigInt>;
  getTickAtSqrtRatio(input: Query.Input_getTickAtSqrtRatio): ExtensionInvocation<Int32>;
  fetchToken(input: Query.Input_fetchToken): ExtensionInvocation<Token>;
  fetchPoolFromTokens(input: Query.Input_fetchPoolFromTokens): ExtensionInvocation<Pool>;
  fetchPoolFromAddress(input: Query.Input_fetchPoolFromAddress): ExtensionInvocation<Pool>;
  fetchTickList(input: Query.Input_fetchTickList): ExtensionInvocation<Array<Tick>>;
  feeAmountToTickSpacing(input: Query.Input_feeAmountToTickSpacing): ExtensionInvocation<Int32>;
  getFeeAmount(input: Query.Input_getFeeAmount): ExtensionInvocation<UInt32>;
  getPermitV(input: Query.Input_getPermitV): ExtensionInvocation<Int32>;
  FACTORY_ADDRESS(input: Query.Input_FACTORY_ADDRESS): ExtensionInvocation<String>;
  POOL_INIT_CODE_HASH(input: Query.Input_POOL_INIT_CODE_HASH): ExtensionInvocation<String>;
  POOL_INIT_CODE_HASH_OPTIMISM(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM): ExtensionInvocation<String>;
  POOL_INIT_CODE_HASH_OPTIMISM_KOVAN(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN): ExtensionInvocation<String>;
  MIN_TICK(input: Query.Input_MIN_TICK): ExtensionInvocation<Int32>;
  MAX_TICK(input: Query.Input_MAX_TICK): ExtensionInvocation<Int32>;
  MIN_SQRT_RATIO(input: Query.Input_MIN_SQRT_RATIO): ExtensionInvocation<BigInt>;
  MAX_SQRT_RATIO(input: Query.Input_MAX_SQRT_RATIO): ExtensionInvocation<BigInt>;
}

export class UniswapQueryExtension implements UniswapQueryModule {

  private client: Client;
  private uri: Uri;

  constructor(client: Client, uri: Uri) {
    this.client = client;
    this.uri = uri;
  }

  currencyEquals(
    input: Query.Input_currencyEquals,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "currencyEquals",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  tokenEquals(
    input: Query.Input_tokenEquals,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tokenEquals",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  tokenAmountEquals(
    input: Query.Input_tokenAmountEquals,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tokenAmountEquals",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  tokenSortsBefore(
    input: Query.Input_tokenSortsBefore,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tokenSortsBefore",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  getEther(
    input: Query.Input_getEther,
  ): ExtensionInvocation<Token> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getEther",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Token>(options),
    };
  }

  getWETH(
    input: Query.Input_getWETH,
  ): ExtensionInvocation<Token> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getWETH",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Token>(options),
    };
  }

  isEther(
    input: Query.Input_isEther,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "isEther",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  wrapToken(
    input: Query.Input_wrapToken,
  ): ExtensionInvocation<Token> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "wrapToken",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Token>(options),
    };
  }

  wrapAmount(
    input: Query.Input_wrapAmount,
  ): ExtensionInvocation<TokenAmount> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "wrapAmount",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TokenAmount>(options),
    };
  }

  createTickListDataProvider(
    input: Query.Input_createTickListDataProvider,
  ): ExtensionInvocation<TickListDataProvider> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createTickListDataProvider",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TickListDataProvider>(options),
    };
  }

  getTick(
    input: Query.Input_getTick,
  ): ExtensionInvocation<Tick> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getTick",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Tick>(options),
    };
  }

  nextInitializedTickWithinOneWord(
    input: Query.Input_nextInitializedTickWithinOneWord,
  ): ExtensionInvocation<NextTickResult> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "nextInitializedTickWithinOneWord",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<NextTickResult>(options),
    };
  }

  createPool(
    input: Query.Input_createPool,
  ): ExtensionInvocation<Pool> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createPool",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Pool>(options),
    };
  }

  getPoolAddress(
    input: Query.Input_getPoolAddress,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getPoolAddress",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  poolInvolvesToken(
    input: Query.Input_poolInvolvesToken,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "poolInvolvesToken",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  poolToken0Price(
    input: Query.Input_poolToken0Price,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "poolToken0Price",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  poolToken1Price(
    input: Query.Input_poolToken1Price,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "poolToken1Price",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  poolPriceOf(
    input: Query.Input_poolPriceOf,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "poolPriceOf",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  poolChainId(
    input: Query.Input_poolChainId,
  ): ExtensionInvocation<ChainId> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "poolChainId",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<ChainId>(options),
    };
  }

  getPoolOutputAmount(
    input: Query.Input_getPoolOutputAmount,
  ): ExtensionInvocation<PoolChangeResult> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getPoolOutputAmount",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<PoolChangeResult>(options),
    };
  }

  getPoolInputAmount(
    input: Query.Input_getPoolInputAmount,
  ): ExtensionInvocation<PoolChangeResult> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getPoolInputAmount",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<PoolChangeResult>(options),
    };
  }

  getPoolTickSpacing(
    input: Query.Input_getPoolTickSpacing,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getPoolTickSpacing",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  createRoute(
    input: Query.Input_createRoute,
  ): ExtensionInvocation<Route> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createRoute",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Route>(options),
    };
  }

  routeChainId(
    input: Query.Input_routeChainId,
  ): ExtensionInvocation<ChainId> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "routeChainId",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<ChainId>(options),
    };
  }

  routeMidPrice(
    input: Query.Input_routeMidPrice,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "routeMidPrice",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  createTradeExactIn(
    input: Query.Input_createTradeExactIn,
  ): ExtensionInvocation<Trade> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createTradeExactIn",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Trade>(options),
    };
  }

  createTradeExactOut(
    input: Query.Input_createTradeExactOut,
  ): ExtensionInvocation<Trade> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createTradeExactOut",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Trade>(options),
    };
  }

  createTradeFromRoute(
    input: Query.Input_createTradeFromRoute,
  ): ExtensionInvocation<Trade> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createTradeFromRoute",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Trade>(options),
    };
  }

  createTradeFromRoutes(
    input: Query.Input_createTradeFromRoutes,
  ): ExtensionInvocation<Trade> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createTradeFromRoutes",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Trade>(options),
    };
  }

  createUncheckedTrade(
    input: Query.Input_createUncheckedTrade,
  ): ExtensionInvocation<Trade> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createUncheckedTrade",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Trade>(options),
    };
  }

  createUncheckedTradeWithMultipleRoutes(
    input: Query.Input_createUncheckedTradeWithMultipleRoutes,
  ): ExtensionInvocation<Trade> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createUncheckedTradeWithMultipleRoutes",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Trade>(options),
    };
  }

  tradeInputAmount(
    input: Query.Input_tradeInputAmount,
  ): ExtensionInvocation<TokenAmount> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tradeInputAmount",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TokenAmount>(options),
    };
  }

  tradeOutputAmount(
    input: Query.Input_tradeOutputAmount,
  ): ExtensionInvocation<TokenAmount> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tradeOutputAmount",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TokenAmount>(options),
    };
  }

  tradeExecutionPrice(
    input: Query.Input_tradeExecutionPrice,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tradeExecutionPrice",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  tradePriceImpact(
    input: Query.Input_tradePriceImpact,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tradePriceImpact",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  tradeMinimumAmountOut(
    input: Query.Input_tradeMinimumAmountOut,
  ): ExtensionInvocation<TokenAmount> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tradeMinimumAmountOut",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TokenAmount>(options),
    };
  }

  tradeMaximumAmountIn(
    input: Query.Input_tradeMaximumAmountIn,
  ): ExtensionInvocation<TokenAmount> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tradeMaximumAmountIn",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TokenAmount>(options),
    };
  }

  tradeWorstExecutionPrice(
    input: Query.Input_tradeWorstExecutionPrice,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tradeWorstExecutionPrice",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  bestTradeExactIn(
    input: Query.Input_bestTradeExactIn,
  ): ExtensionInvocation<Array<Trade>> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "bestTradeExactIn",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Array<Trade>>(options),
    };
  }

  bestTradeExactOut(
    input: Query.Input_bestTradeExactOut,
  ): ExtensionInvocation<Array<Trade>> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "bestTradeExactOut",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Array<Trade>>(options),
    };
  }

  createPosition(
    input: Query.Input_createPosition,
  ): ExtensionInvocation<Position> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createPosition",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Position>(options),
    };
  }

  createPositionFromAmounts(
    input: Query.Input_createPositionFromAmounts,
  ): ExtensionInvocation<Position> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createPositionFromAmounts",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Position>(options),
    };
  }

  createPositionFromAmount0(
    input: Query.Input_createPositionFromAmount0,
  ): ExtensionInvocation<Position> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createPositionFromAmount0",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Position>(options),
    };
  }

  createPositionFromAmount1(
    input: Query.Input_createPositionFromAmount1,
  ): ExtensionInvocation<Position> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createPositionFromAmount1",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Position>(options),
    };
  }

  positionToken0PriceLower(
    input: Query.Input_positionToken0PriceLower,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "positionToken0PriceLower",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  positionToken0PriceUpper(
    input: Query.Input_positionToken0PriceUpper,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "positionToken0PriceUpper",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  positionAmount0(
    input: Query.Input_positionAmount0,
  ): ExtensionInvocation<TokenAmount> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "positionAmount0",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TokenAmount>(options),
    };
  }

  positionAmount1(
    input: Query.Input_positionAmount1,
  ): ExtensionInvocation<TokenAmount> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "positionAmount1",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<TokenAmount>(options),
    };
  }

  mintAmounts(
    input: Query.Input_mintAmounts,
  ): ExtensionInvocation<MintAmounts> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "mintAmounts",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MintAmounts>(options),
    };
  }

  mintAmountsWithSlippage(
    input: Query.Input_mintAmountsWithSlippage,
  ): ExtensionInvocation<MintAmounts> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "mintAmountsWithSlippage",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MintAmounts>(options),
    };
  }

  burnAmountsWithSlippage(
    input: Query.Input_burnAmountsWithSlippage,
  ): ExtensionInvocation<MintAmounts> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "burnAmountsWithSlippage",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MintAmounts>(options),
    };
  }

  swapCallParameters(
    input: Query.Input_swapCallParameters,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "swapCallParameters",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  encodeRouteToPath(
    input: Query.Input_encodeRouteToPath,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeRouteToPath",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  encodePermit(
    input: Query.Input_encodePermit,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodePermit",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  encodeUnwrapWETH9(
    input: Query.Input_encodeUnwrapWETH9,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeUnwrapWETH9",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  encodeSweepToken(
    input: Query.Input_encodeSweepToken,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeSweepToken",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  encodeRefundETH(
    input: Query.Input_encodeRefundETH,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeRefundETH",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  encodeMulticall(
    input: Query.Input_encodeMulticall,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeMulticall",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  collectRewards(
    input: Query.Input_collectRewards,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "collectRewards",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  withdrawToken(
    input: Query.Input_withdrawToken,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "withdrawToken",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  encodeDeposit(
    input: Query.Input_encodeDeposit,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeDeposit",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  quoteCallParameters(
    input: Query.Input_quoteCallParameters,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "quoteCallParameters",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  createCallParameters(
    input: Query.Input_createCallParameters,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "createCallParameters",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  addCallParameters(
    input: Query.Input_addCallParameters,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "addCallParameters",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  collectCallParameters(
    input: Query.Input_collectCallParameters,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "collectCallParameters",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  removeCallParameters(
    input: Query.Input_removeCallParameters,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "removeCallParameters",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  safeTransferFromParameters(
    input: Query.Input_safeTransferFromParameters,
  ): ExtensionInvocation<MethodParameters> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "safeTransferFromParameters",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<MethodParameters>(options),
    };
  }

  toHex(
    input: Query.Input_toHex,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "toHex",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  computePoolAddress(
    input: Query.Input_computePoolAddress,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "computePoolAddress",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  encodeSqrtRatioX96(
    input: Query.Input_encodeSqrtRatioX96,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "encodeSqrtRatioX96",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  mulDivRoundingUp(
    input: Query.Input_mulDivRoundingUp,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "mulDivRoundingUp",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  addDelta(
    input: Query.Input_addDelta,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "addDelta",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  maxLiquidityForAmounts(
    input: Query.Input_maxLiquidityForAmounts,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "maxLiquidityForAmounts",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  mostSignificantBit(
    input: Query.Input_mostSignificantBit,
  ): ExtensionInvocation<UInt32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "mostSignificantBit",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<UInt32>(options),
    };
  }

  nearestUsableTick(
    input: Query.Input_nearestUsableTick,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "nearestUsableTick",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  tickToPrice(
    input: Query.Input_tickToPrice,
  ): ExtensionInvocation<Price> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tickToPrice",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Price>(options),
    };
  }

  priceToClosestTick(
    input: Query.Input_priceToClosestTick,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "priceToClosestTick",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  getAmount0Delta(
    input: Query.Input_getAmount0Delta,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getAmount0Delta",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  getAmount1Delta(
    input: Query.Input_getAmount1Delta,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getAmount1Delta",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  getNextSqrtPriceFromInput(
    input: Query.Input_getNextSqrtPriceFromInput,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getNextSqrtPriceFromInput",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  getNextSqrtPriceFromOutput(
    input: Query.Input_getNextSqrtPriceFromOutput,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getNextSqrtPriceFromOutput",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  validateTickList(
    input: Query.Input_validateTickList,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "validateTickList",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  tickIsBelowSmallest(
    input: Query.Input_tickIsBelowSmallest,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tickIsBelowSmallest",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  tickIsAtOrAboveLargest(
    input: Query.Input_tickIsAtOrAboveLargest,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tickIsAtOrAboveLargest",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  nextInitializedTick(
    input: Query.Input_nextInitializedTick,
  ): ExtensionInvocation<Tick> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "nextInitializedTick",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Tick>(options),
    };
  }

  tickListIsSorted(
    input: Query.Input_tickListIsSorted,
  ): ExtensionInvocation<Boolean> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "tickListIsSorted",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Boolean>(options),
    };
  }

  getSqrtRatioAtTick(
    input: Query.Input_getSqrtRatioAtTick,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getSqrtRatioAtTick",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  getTickAtSqrtRatio(
    input: Query.Input_getTickAtSqrtRatio,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getTickAtSqrtRatio",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  fetchToken(
    input: Query.Input_fetchToken,
  ): ExtensionInvocation<Token> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "fetchToken",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Token>(options),
    };
  }

  fetchPoolFromTokens(
    input: Query.Input_fetchPoolFromTokens,
  ): ExtensionInvocation<Pool> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "fetchPoolFromTokens",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Pool>(options),
    };
  }

  fetchPoolFromAddress(
    input: Query.Input_fetchPoolFromAddress,
  ): ExtensionInvocation<Pool> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "fetchPoolFromAddress",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Pool>(options),
    };
  }

  fetchTickList(
    input: Query.Input_fetchTickList,
  ): ExtensionInvocation<Array<Tick>> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "fetchTickList",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Array<Tick>>(options),
    };
  }

  feeAmountToTickSpacing(
    input: Query.Input_feeAmountToTickSpacing,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "feeAmountToTickSpacing",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  getFeeAmount(
    input: Query.Input_getFeeAmount,
  ): ExtensionInvocation<UInt32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getFeeAmount",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<UInt32>(options),
    };
  }

  getPermitV(
    input: Query.Input_getPermitV,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "getPermitV",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  FACTORY_ADDRESS(
    input: Query.Input_FACTORY_ADDRESS,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "FACTORY_ADDRESS",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  POOL_INIT_CODE_HASH(
    input: Query.Input_POOL_INIT_CODE_HASH,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "POOL_INIT_CODE_HASH",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  POOL_INIT_CODE_HASH_OPTIMISM(
    input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "POOL_INIT_CODE_HASH_OPTIMISM",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  POOL_INIT_CODE_HASH_OPTIMISM_KOVAN(
    input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN,
  ): ExtensionInvocation<String> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "POOL_INIT_CODE_HASH_OPTIMISM_KOVAN",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<String>(options),
    };
  }

  MIN_TICK(
    input: Query.Input_MIN_TICK,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "MIN_TICK",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  MAX_TICK(
    input: Query.Input_MAX_TICK,
  ): ExtensionInvocation<Int32> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "MAX_TICK",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Int32>(options),
    };
  }

  MIN_SQRT_RATIO(
    input: Query.Input_MIN_SQRT_RATIO,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "MIN_SQRT_RATIO",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

  MAX_SQRT_RATIO(
    input: Query.Input_MAX_SQRT_RATIO,
  ): ExtensionInvocation<BigInt> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "query",
      method: "MAX_SQRT_RATIO",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<BigInt>(options),
    };
  }

}
