// NOTE: This is generated by 'w3 codegen', DO NOT MODIFY

// @ts-noCheck
import { Client, InvokeApiOptions, InvokeApiResult, Uri } from '@web3api/core-js'

import { BigInt, Int32, UInt32 } from '../baseTypes'
import * as Query from './queryTypes'
import {
  ChainId,
  MethodParameters,
  MintAmounts,
  NextTickResult,
  Pool,
  PoolChangeResult,
  Position,
  Price,
  Route,
  Tick,
  TickListDataProvider,
  Token,
  TokenAmount,
  Trade,
} from './types'

export interface UniswapQueryModule {
  readonly config: {
    currencyEquals(input: Query.Input_currencyEquals): InvokeApiOptions
    tokenEquals(input: Query.Input_tokenEquals): InvokeApiOptions
    tokenAmountEquals(input: Query.Input_tokenAmountEquals): InvokeApiOptions
    tokenSortsBefore(input: Query.Input_tokenSortsBefore): InvokeApiOptions
    getEther(input: Query.Input_getEther): InvokeApiOptions
    getWETH(input: Query.Input_getWETH): InvokeApiOptions
    isEther(input: Query.Input_isEther): InvokeApiOptions
    wrapToken(input: Query.Input_wrapToken): InvokeApiOptions
    wrapAmount(input: Query.Input_wrapAmount): InvokeApiOptions
    createTickListDataProvider(input: Query.Input_createTickListDataProvider): InvokeApiOptions
    getTick(input: Query.Input_getTick): InvokeApiOptions
    nextInitializedTickWithinOneWord(input: Query.Input_nextInitializedTickWithinOneWord): InvokeApiOptions
    createPool(input: Query.Input_createPool): InvokeApiOptions
    getPoolAddress(input: Query.Input_getPoolAddress): InvokeApiOptions
    poolInvolvesToken(input: Query.Input_poolInvolvesToken): InvokeApiOptions
    poolToken0Price(input: Query.Input_poolToken0Price): InvokeApiOptions
    poolToken1Price(input: Query.Input_poolToken1Price): InvokeApiOptions
    poolPriceOf(input: Query.Input_poolPriceOf): InvokeApiOptions
    poolChainId(input: Query.Input_poolChainId): InvokeApiOptions
    getPoolOutputAmount(input: Query.Input_getPoolOutputAmount): InvokeApiOptions
    getPoolInputAmount(input: Query.Input_getPoolInputAmount): InvokeApiOptions
    getPoolTickSpacing(input: Query.Input_getPoolTickSpacing): InvokeApiOptions
    createRoute(input: Query.Input_createRoute): InvokeApiOptions
    routeChainId(input: Query.Input_routeChainId): InvokeApiOptions
    routeMidPrice(input: Query.Input_routeMidPrice): InvokeApiOptions
    createTradeExactIn(input: Query.Input_createTradeExactIn): InvokeApiOptions
    createTradeExactOut(input: Query.Input_createTradeExactOut): InvokeApiOptions
    createTradeFromRoute(input: Query.Input_createTradeFromRoute): InvokeApiOptions
    createTradeFromRoutes(input: Query.Input_createTradeFromRoutes): InvokeApiOptions
    createUncheckedTrade(input: Query.Input_createUncheckedTrade): InvokeApiOptions
    createUncheckedTradeWithMultipleRoutes(input: Query.Input_createUncheckedTradeWithMultipleRoutes): InvokeApiOptions
    tradeInputAmount(input: Query.Input_tradeInputAmount): InvokeApiOptions
    tradeOutputAmount(input: Query.Input_tradeOutputAmount): InvokeApiOptions
    tradeExecutionPrice(input: Query.Input_tradeExecutionPrice): InvokeApiOptions
    tradePriceImpact(input: Query.Input_tradePriceImpact): InvokeApiOptions
    tradeMinimumAmountOut(input: Query.Input_tradeMinimumAmountOut): InvokeApiOptions
    tradeMaximumAmountIn(input: Query.Input_tradeMaximumAmountIn): InvokeApiOptions
    tradeWorstExecutionPrice(input: Query.Input_tradeWorstExecutionPrice): InvokeApiOptions
    bestTradeExactIn(input: Query.Input_bestTradeExactIn): InvokeApiOptions
    bestTradeExactOut(input: Query.Input_bestTradeExactOut): InvokeApiOptions
    createPosition(input: Query.Input_createPosition): InvokeApiOptions
    createPositionFromAmounts(input: Query.Input_createPositionFromAmounts): InvokeApiOptions
    createPositionFromAmount0(input: Query.Input_createPositionFromAmount0): InvokeApiOptions
    createPositionFromAmount1(input: Query.Input_createPositionFromAmount1): InvokeApiOptions
    positionToken0PriceLower(input: Query.Input_positionToken0PriceLower): InvokeApiOptions
    positionToken0PriceUpper(input: Query.Input_positionToken0PriceUpper): InvokeApiOptions
    positionAmount0(input: Query.Input_positionAmount0): InvokeApiOptions
    positionAmount1(input: Query.Input_positionAmount1): InvokeApiOptions
    mintAmounts(input: Query.Input_mintAmounts): InvokeApiOptions
    mintAmountsWithSlippage(input: Query.Input_mintAmountsWithSlippage): InvokeApiOptions
    burnAmountsWithSlippage(input: Query.Input_burnAmountsWithSlippage): InvokeApiOptions
    swapCallParameters(input: Query.Input_swapCallParameters): InvokeApiOptions
    encodeRouteToPath(input: Query.Input_encodeRouteToPath): InvokeApiOptions
    encodePermit(input: Query.Input_encodePermit): InvokeApiOptions
    encodeUnwrapWETH9(input: Query.Input_encodeUnwrapWETH9): InvokeApiOptions
    encodeSweepToken(input: Query.Input_encodeSweepToken): InvokeApiOptions
    encodeRefundETH(input: Query.Input_encodeRefundETH): InvokeApiOptions
    encodeMulticall(input: Query.Input_encodeMulticall): InvokeApiOptions
    collectRewards(input: Query.Input_collectRewards): InvokeApiOptions
    withdrawToken(input: Query.Input_withdrawToken): InvokeApiOptions
    encodeDeposit(input: Query.Input_encodeDeposit): InvokeApiOptions
    quoteCallParameters(input: Query.Input_quoteCallParameters): InvokeApiOptions
    createCallParameters(input: Query.Input_createCallParameters): InvokeApiOptions
    addCallParameters(input: Query.Input_addCallParameters): InvokeApiOptions
    collectCallParameters(input: Query.Input_collectCallParameters): InvokeApiOptions
    removeCallParameters(input: Query.Input_removeCallParameters): InvokeApiOptions
    safeTransferFromParameters(input: Query.Input_safeTransferFromParameters): InvokeApiOptions
    toHex(input: Query.Input_toHex): InvokeApiOptions
    computePoolAddress(input: Query.Input_computePoolAddress): InvokeApiOptions
    encodeSqrtRatioX96(input: Query.Input_encodeSqrtRatioX96): InvokeApiOptions
    mulDivRoundingUp(input: Query.Input_mulDivRoundingUp): InvokeApiOptions
    addDelta(input: Query.Input_addDelta): InvokeApiOptions
    maxLiquidityForAmounts(input: Query.Input_maxLiquidityForAmounts): InvokeApiOptions
    mostSignificantBit(input: Query.Input_mostSignificantBit): InvokeApiOptions
    nearestUsableTick(input: Query.Input_nearestUsableTick): InvokeApiOptions
    tickToPrice(input: Query.Input_tickToPrice): InvokeApiOptions
    priceToClosestTick(input: Query.Input_priceToClosestTick): InvokeApiOptions
    getAmount0Delta(input: Query.Input_getAmount0Delta): InvokeApiOptions
    getAmount1Delta(input: Query.Input_getAmount1Delta): InvokeApiOptions
    getNextSqrtPriceFromInput(input: Query.Input_getNextSqrtPriceFromInput): InvokeApiOptions
    getNextSqrtPriceFromOutput(input: Query.Input_getNextSqrtPriceFromOutput): InvokeApiOptions
    validateTickList(input: Query.Input_validateTickList): InvokeApiOptions
    tickIsBelowSmallest(input: Query.Input_tickIsBelowSmallest): InvokeApiOptions
    tickIsAtOrAboveLargest(input: Query.Input_tickIsAtOrAboveLargest): InvokeApiOptions
    nextInitializedTick(input: Query.Input_nextInitializedTick): InvokeApiOptions
    tickListIsSorted(input: Query.Input_tickListIsSorted): InvokeApiOptions
    getSqrtRatioAtTick(input: Query.Input_getSqrtRatioAtTick): InvokeApiOptions
    getTickAtSqrtRatio(input: Query.Input_getTickAtSqrtRatio): InvokeApiOptions
    fetchToken(input: Query.Input_fetchToken): InvokeApiOptions
    fetchPoolFromTokens(input: Query.Input_fetchPoolFromTokens): InvokeApiOptions
    fetchPoolFromAddress(input: Query.Input_fetchPoolFromAddress): InvokeApiOptions
    fetchTickList(input: Query.Input_fetchTickList): InvokeApiOptions
    feeAmountToTickSpacing(input: Query.Input_feeAmountToTickSpacing): InvokeApiOptions
    getFeeAmount(input: Query.Input_getFeeAmount): InvokeApiOptions
    getPermitV(input: Query.Input_getPermitV): InvokeApiOptions
    FACTORY_ADDRESS(input: Query.Input_FACTORY_ADDRESS): InvokeApiOptions
    POOL_INIT_CODE_HASH(input: Query.Input_POOL_INIT_CODE_HASH): InvokeApiOptions
    POOL_INIT_CODE_HASH_OPTIMISM(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM): InvokeApiOptions
    POOL_INIT_CODE_HASH_OPTIMISM_KOVAN(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN): InvokeApiOptions
    MIN_TICK(input: Query.Input_MIN_TICK): InvokeApiOptions
    MAX_TICK(input: Query.Input_MAX_TICK): InvokeApiOptions
    MIN_SQRT_RATIO(input: Query.Input_MIN_SQRT_RATIO): InvokeApiOptions
    MAX_SQRT_RATIO(input: Query.Input_MAX_SQRT_RATIO): InvokeApiOptions
  }
  currencyEquals(input: Query.Input_currencyEquals): Promise<boolean>
  tokenEquals(input: Query.Input_tokenEquals): Promise<boolean>
  tokenAmountEquals(input: Query.Input_tokenAmountEquals): Promise<boolean>
  tokenSortsBefore(input: Query.Input_tokenSortsBefore): Promise<boolean>
  getEther(input: Query.Input_getEther): Promise<Token>
  getWETH(input: Query.Input_getWETH): Promise<Token>
  isEther(input: Query.Input_isEther): Promise<boolean>
  wrapToken(input: Query.Input_wrapToken): Promise<Token>
  wrapAmount(input: Query.Input_wrapAmount): Promise<TokenAmount>
  createTickListDataProvider(input: Query.Input_createTickListDataProvider): Promise<TickListDataProvider>
  getTick(input: Query.Input_getTick): Promise<Tick>
  nextInitializedTickWithinOneWord(input: Query.Input_nextInitializedTickWithinOneWord): Promise<NextTickResult>
  createPool(input: Query.Input_createPool): Promise<Pool>
  getPoolAddress(input: Query.Input_getPoolAddress): Promise<string>
  poolInvolvesToken(input: Query.Input_poolInvolvesToken): Promise<boolean>
  poolToken0Price(input: Query.Input_poolToken0Price): Promise<Price>
  poolToken1Price(input: Query.Input_poolToken1Price): Promise<Price>
  poolPriceOf(input: Query.Input_poolPriceOf): Promise<Price>
  poolChainId(input: Query.Input_poolChainId): Promise<ChainId>
  getPoolOutputAmount(input: Query.Input_getPoolOutputAmount): Promise<PoolChangeResult>
  getPoolInputAmount(input: Query.Input_getPoolInputAmount): Promise<PoolChangeResult>
  getPoolTickSpacing(input: Query.Input_getPoolTickSpacing): Promise<Int32>
  createRoute(input: Query.Input_createRoute): Promise<Route>
  routeChainId(input: Query.Input_routeChainId): Promise<ChainId>
  routeMidPrice(input: Query.Input_routeMidPrice): Promise<Price>
  createTradeExactIn(input: Query.Input_createTradeExactIn): Promise<Trade>
  createTradeExactOut(input: Query.Input_createTradeExactOut): Promise<Trade>
  createTradeFromRoute(input: Query.Input_createTradeFromRoute): Promise<Trade>
  createTradeFromRoutes(input: Query.Input_createTradeFromRoutes): Promise<Trade>
  createUncheckedTrade(input: Query.Input_createUncheckedTrade): Promise<Trade>
  createUncheckedTradeWithMultipleRoutes(input: Query.Input_createUncheckedTradeWithMultipleRoutes): Promise<Trade>
  tradeInputAmount(input: Query.Input_tradeInputAmount): Promise<TokenAmount>
  tradeOutputAmount(input: Query.Input_tradeOutputAmount): Promise<TokenAmount>
  tradeExecutionPrice(input: Query.Input_tradeExecutionPrice): Promise<Price>
  tradePriceImpact(input: Query.Input_tradePriceImpact): Promise<string>
  tradeMinimumAmountOut(input: Query.Input_tradeMinimumAmountOut): Promise<TokenAmount>
  tradeMaximumAmountIn(input: Query.Input_tradeMaximumAmountIn): Promise<TokenAmount>
  tradeWorstExecutionPrice(input: Query.Input_tradeWorstExecutionPrice): Promise<Price>
  bestTradeExactIn(input: Query.Input_bestTradeExactIn): Promise<Array<Trade>>
  bestTradeExactOut(input: Query.Input_bestTradeExactOut): Promise<Array<Trade>>
  createPosition(input: Query.Input_createPosition): Promise<Position>
  createPositionFromAmounts(input: Query.Input_createPositionFromAmounts): Promise<Position>
  createPositionFromAmount0(input: Query.Input_createPositionFromAmount0): Promise<Position>
  createPositionFromAmount1(input: Query.Input_createPositionFromAmount1): Promise<Position>
  positionToken0PriceLower(input: Query.Input_positionToken0PriceLower): Promise<Price>
  positionToken0PriceUpper(input: Query.Input_positionToken0PriceUpper): Promise<Price>
  positionAmount0(input: Query.Input_positionAmount0): Promise<TokenAmount>
  positionAmount1(input: Query.Input_positionAmount1): Promise<TokenAmount>
  mintAmounts(input: Query.Input_mintAmounts): Promise<MintAmounts>
  mintAmountsWithSlippage(input: Query.Input_mintAmountsWithSlippage): Promise<MintAmounts>
  burnAmountsWithSlippage(input: Query.Input_burnAmountsWithSlippage): Promise<MintAmounts>
  swapCallParameters(input: Query.Input_swapCallParameters): Promise<MethodParameters>
  encodeRouteToPath(input: Query.Input_encodeRouteToPath): Promise<string>
  encodePermit(input: Query.Input_encodePermit): Promise<string>
  encodeUnwrapWETH9(input: Query.Input_encodeUnwrapWETH9): Promise<string>
  encodeSweepToken(input: Query.Input_encodeSweepToken): Promise<string>
  encodeRefundETH(input: Query.Input_encodeRefundETH): Promise<string>
  encodeMulticall(input: Query.Input_encodeMulticall): Promise<string>
  collectRewards(input: Query.Input_collectRewards): Promise<MethodParameters>
  withdrawToken(input: Query.Input_withdrawToken): Promise<MethodParameters>
  encodeDeposit(input: Query.Input_encodeDeposit): Promise<string>
  quoteCallParameters(input: Query.Input_quoteCallParameters): Promise<MethodParameters>
  createCallParameters(input: Query.Input_createCallParameters): Promise<MethodParameters>
  addCallParameters(input: Query.Input_addCallParameters): Promise<MethodParameters>
  collectCallParameters(input: Query.Input_collectCallParameters): Promise<MethodParameters>
  removeCallParameters(input: Query.Input_removeCallParameters): Promise<MethodParameters>
  safeTransferFromParameters(input: Query.Input_safeTransferFromParameters): Promise<MethodParameters>
  toHex(input: Query.Input_toHex): Promise<string>
  computePoolAddress(input: Query.Input_computePoolAddress): Promise<string>
  encodeSqrtRatioX96(input: Query.Input_encodeSqrtRatioX96): Promise<BigInt>
  mulDivRoundingUp(input: Query.Input_mulDivRoundingUp): Promise<BigInt>
  addDelta(input: Query.Input_addDelta): Promise<BigInt>
  maxLiquidityForAmounts(input: Query.Input_maxLiquidityForAmounts): Promise<BigInt>
  mostSignificantBit(input: Query.Input_mostSignificantBit): Promise<UInt32>
  nearestUsableTick(input: Query.Input_nearestUsableTick): Promise<Int32>
  tickToPrice(input: Query.Input_tickToPrice): Promise<Price>
  priceToClosestTick(input: Query.Input_priceToClosestTick): Promise<Int32>
  getAmount0Delta(input: Query.Input_getAmount0Delta): Promise<BigInt>
  getAmount1Delta(input: Query.Input_getAmount1Delta): Promise<BigInt>
  getNextSqrtPriceFromInput(input: Query.Input_getNextSqrtPriceFromInput): Promise<BigInt>
  getNextSqrtPriceFromOutput(input: Query.Input_getNextSqrtPriceFromOutput): Promise<BigInt>
  validateTickList(input: Query.Input_validateTickList): Promise<boolean>
  tickIsBelowSmallest(input: Query.Input_tickIsBelowSmallest): Promise<boolean>
  tickIsAtOrAboveLargest(input: Query.Input_tickIsAtOrAboveLargest): Promise<boolean>
  nextInitializedTick(input: Query.Input_nextInitializedTick): Promise<Tick>
  tickListIsSorted(input: Query.Input_tickListIsSorted): Promise<boolean>
  getSqrtRatioAtTick(input: Query.Input_getSqrtRatioAtTick): Promise<BigInt>
  getTickAtSqrtRatio(input: Query.Input_getTickAtSqrtRatio): Promise<Int32>
  fetchToken(input: Query.Input_fetchToken): Promise<Token>
  fetchPoolFromTokens(input: Query.Input_fetchPoolFromTokens): Promise<Pool>
  fetchPoolFromAddress(input: Query.Input_fetchPoolFromAddress): Promise<Pool>
  fetchTickList(input: Query.Input_fetchTickList): Promise<Array<Tick>>
  feeAmountToTickSpacing(input: Query.Input_feeAmountToTickSpacing): Promise<Int32>
  getFeeAmount(input: Query.Input_getFeeAmount): Promise<UInt32>
  getPermitV(input: Query.Input_getPermitV): Promise<Int32>
  FACTORY_ADDRESS(input: Query.Input_FACTORY_ADDRESS): Promise<string>
  POOL_INIT_CODE_HASH(input: Query.Input_POOL_INIT_CODE_HASH): Promise<string>
  POOL_INIT_CODE_HASH_OPTIMISM(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM): Promise<string>
  POOL_INIT_CODE_HASH_OPTIMISM_KOVAN(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN): Promise<string>
  MIN_TICK(input: Query.Input_MIN_TICK): Promise<Int32>
  MAX_TICK(input: Query.Input_MAX_TICK): Promise<Int32>
  MIN_SQRT_RATIO(input: Query.Input_MIN_SQRT_RATIO): Promise<BigInt>
  MAX_SQRT_RATIO(input: Query.Input_MAX_SQRT_RATIO): Promise<BigInt>
}

export class UniswapQueryExtension implements UniswapQueryModule {
  private client: Client
  private uri: Uri

  constructor(client: Client, uri: Uri) {
    this.client = client
    this.uri = uri
  }

  readonly config = {
    currencyEquals: (input: Query.Input_currencyEquals): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'currencyEquals',
      input,
    }),
    tokenEquals: (input: Query.Input_tokenEquals): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tokenEquals',
      input,
    }),
    tokenAmountEquals: (input: Query.Input_tokenAmountEquals): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tokenAmountEquals',
      input,
    }),
    tokenSortsBefore: (input: Query.Input_tokenSortsBefore): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tokenSortsBefore',
      input,
    }),
    getEther: (input: Query.Input_getEther): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getEther',
      input,
    }),
    getWETH: (input: Query.Input_getWETH): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getWETH',
      input,
    }),
    isEther: (input: Query.Input_isEther): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'isEther',
      input,
    }),
    wrapToken: (input: Query.Input_wrapToken): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'wrapToken',
      input,
    }),
    wrapAmount: (input: Query.Input_wrapAmount): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'wrapAmount',
      input,
    }),
    createTickListDataProvider: (input: Query.Input_createTickListDataProvider): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createTickListDataProvider',
      input,
    }),
    getTick: (input: Query.Input_getTick): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getTick',
      input,
    }),
    nextInitializedTickWithinOneWord: (input: Query.Input_nextInitializedTickWithinOneWord): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'nextInitializedTickWithinOneWord',
      input,
    }),
    createPool: (input: Query.Input_createPool): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createPool',
      input,
    }),
    getPoolAddress: (input: Query.Input_getPoolAddress): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getPoolAddress',
      input,
    }),
    poolInvolvesToken: (input: Query.Input_poolInvolvesToken): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'poolInvolvesToken',
      input,
    }),
    poolToken0Price: (input: Query.Input_poolToken0Price): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'poolToken0Price',
      input,
    }),
    poolToken1Price: (input: Query.Input_poolToken1Price): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'poolToken1Price',
      input,
    }),
    poolPriceOf: (input: Query.Input_poolPriceOf): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'poolPriceOf',
      input,
    }),
    poolChainId: (input: Query.Input_poolChainId): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'poolChainId',
      input,
    }),
    getPoolOutputAmount: (input: Query.Input_getPoolOutputAmount): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getPoolOutputAmount',
      input,
    }),
    getPoolInputAmount: (input: Query.Input_getPoolInputAmount): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getPoolInputAmount',
      input,
    }),
    getPoolTickSpacing: (input: Query.Input_getPoolTickSpacing): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getPoolTickSpacing',
      input,
    }),
    createRoute: (input: Query.Input_createRoute): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createRoute',
      input,
    }),
    routeChainId: (input: Query.Input_routeChainId): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'routeChainId',
      input,
    }),
    routeMidPrice: (input: Query.Input_routeMidPrice): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'routeMidPrice',
      input,
    }),
    createTradeExactIn: (input: Query.Input_createTradeExactIn): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createTradeExactIn',
      input,
    }),
    createTradeExactOut: (input: Query.Input_createTradeExactOut): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createTradeExactOut',
      input,
    }),
    createTradeFromRoute: (input: Query.Input_createTradeFromRoute): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createTradeFromRoute',
      input,
    }),
    createTradeFromRoutes: (input: Query.Input_createTradeFromRoutes): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createTradeFromRoutes',
      input,
    }),
    createUncheckedTrade: (input: Query.Input_createUncheckedTrade): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createUncheckedTrade',
      input,
    }),
    createUncheckedTradeWithMultipleRoutes: (
      input: Query.Input_createUncheckedTradeWithMultipleRoutes
    ): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createUncheckedTradeWithMultipleRoutes',
      input,
    }),
    tradeInputAmount: (input: Query.Input_tradeInputAmount): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tradeInputAmount',
      input,
    }),
    tradeOutputAmount: (input: Query.Input_tradeOutputAmount): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tradeOutputAmount',
      input,
    }),
    tradeExecutionPrice: (input: Query.Input_tradeExecutionPrice): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tradeExecutionPrice',
      input,
    }),
    tradePriceImpact: (input: Query.Input_tradePriceImpact): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tradePriceImpact',
      input,
    }),
    tradeMinimumAmountOut: (input: Query.Input_tradeMinimumAmountOut): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tradeMinimumAmountOut',
      input,
    }),
    tradeMaximumAmountIn: (input: Query.Input_tradeMaximumAmountIn): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tradeMaximumAmountIn',
      input,
    }),
    tradeWorstExecutionPrice: (input: Query.Input_tradeWorstExecutionPrice): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tradeWorstExecutionPrice',
      input,
    }),
    bestTradeExactIn: (input: Query.Input_bestTradeExactIn): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'bestTradeExactIn',
      input,
    }),
    bestTradeExactOut: (input: Query.Input_bestTradeExactOut): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'bestTradeExactOut',
      input,
    }),
    createPosition: (input: Query.Input_createPosition): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createPosition',
      input,
    }),
    createPositionFromAmounts: (input: Query.Input_createPositionFromAmounts): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createPositionFromAmounts',
      input,
    }),
    createPositionFromAmount0: (input: Query.Input_createPositionFromAmount0): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createPositionFromAmount0',
      input,
    }),
    createPositionFromAmount1: (input: Query.Input_createPositionFromAmount1): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createPositionFromAmount1',
      input,
    }),
    positionToken0PriceLower: (input: Query.Input_positionToken0PriceLower): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'positionToken0PriceLower',
      input,
    }),
    positionToken0PriceUpper: (input: Query.Input_positionToken0PriceUpper): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'positionToken0PriceUpper',
      input,
    }),
    positionAmount0: (input: Query.Input_positionAmount0): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'positionAmount0',
      input,
    }),
    positionAmount1: (input: Query.Input_positionAmount1): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'positionAmount1',
      input,
    }),
    mintAmounts: (input: Query.Input_mintAmounts): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'mintAmounts',
      input,
    }),
    mintAmountsWithSlippage: (input: Query.Input_mintAmountsWithSlippage): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'mintAmountsWithSlippage',
      input,
    }),
    burnAmountsWithSlippage: (input: Query.Input_burnAmountsWithSlippage): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'burnAmountsWithSlippage',
      input,
    }),
    swapCallParameters: (input: Query.Input_swapCallParameters): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'swapCallParameters',
      input,
    }),
    encodeRouteToPath: (input: Query.Input_encodeRouteToPath): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodeRouteToPath',
      input,
    }),
    encodePermit: (input: Query.Input_encodePermit): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodePermit',
      input,
    }),
    encodeUnwrapWETH9: (input: Query.Input_encodeUnwrapWETH9): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodeUnwrapWETH9',
      input,
    }),
    encodeSweepToken: (input: Query.Input_encodeSweepToken): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodeSweepToken',
      input,
    }),
    encodeRefundETH: (input: Query.Input_encodeRefundETH): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodeRefundETH',
      input,
    }),
    encodeMulticall: (input: Query.Input_encodeMulticall): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodeMulticall',
      input,
    }),
    collectRewards: (input: Query.Input_collectRewards): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'collectRewards',
      input,
    }),
    withdrawToken: (input: Query.Input_withdrawToken): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'withdrawToken',
      input,
    }),
    encodeDeposit: (input: Query.Input_encodeDeposit): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodeDeposit',
      input,
    }),
    quoteCallParameters: (input: Query.Input_quoteCallParameters): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'quoteCallParameters',
      input,
    }),
    createCallParameters: (input: Query.Input_createCallParameters): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'createCallParameters',
      input,
    }),
    addCallParameters: (input: Query.Input_addCallParameters): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'addCallParameters',
      input,
    }),
    collectCallParameters: (input: Query.Input_collectCallParameters): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'collectCallParameters',
      input,
    }),
    removeCallParameters: (input: Query.Input_removeCallParameters): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'removeCallParameters',
      input,
    }),
    safeTransferFromParameters: (input: Query.Input_safeTransferFromParameters): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'safeTransferFromParameters',
      input,
    }),
    toHex: (input: Query.Input_toHex): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'toHex',
      input,
    }),
    computePoolAddress: (input: Query.Input_computePoolAddress): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'computePoolAddress',
      input,
    }),
    encodeSqrtRatioX96: (input: Query.Input_encodeSqrtRatioX96): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'encodeSqrtRatioX96',
      input,
    }),
    mulDivRoundingUp: (input: Query.Input_mulDivRoundingUp): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'mulDivRoundingUp',
      input,
    }),
    addDelta: (input: Query.Input_addDelta): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'addDelta',
      input,
    }),
    maxLiquidityForAmounts: (input: Query.Input_maxLiquidityForAmounts): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'maxLiquidityForAmounts',
      input,
    }),
    mostSignificantBit: (input: Query.Input_mostSignificantBit): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'mostSignificantBit',
      input,
    }),
    nearestUsableTick: (input: Query.Input_nearestUsableTick): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'nearestUsableTick',
      input,
    }),
    tickToPrice: (input: Query.Input_tickToPrice): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tickToPrice',
      input,
    }),
    priceToClosestTick: (input: Query.Input_priceToClosestTick): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'priceToClosestTick',
      input,
    }),
    getAmount0Delta: (input: Query.Input_getAmount0Delta): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getAmount0Delta',
      input,
    }),
    getAmount1Delta: (input: Query.Input_getAmount1Delta): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getAmount1Delta',
      input,
    }),
    getNextSqrtPriceFromInput: (input: Query.Input_getNextSqrtPriceFromInput): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getNextSqrtPriceFromInput',
      input,
    }),
    getNextSqrtPriceFromOutput: (input: Query.Input_getNextSqrtPriceFromOutput): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getNextSqrtPriceFromOutput',
      input,
    }),
    validateTickList: (input: Query.Input_validateTickList): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'validateTickList',
      input,
    }),
    tickIsBelowSmallest: (input: Query.Input_tickIsBelowSmallest): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tickIsBelowSmallest',
      input,
    }),
    tickIsAtOrAboveLargest: (input: Query.Input_tickIsAtOrAboveLargest): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tickIsAtOrAboveLargest',
      input,
    }),
    nextInitializedTick: (input: Query.Input_nextInitializedTick): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'nextInitializedTick',
      input,
    }),
    tickListIsSorted: (input: Query.Input_tickListIsSorted): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'tickListIsSorted',
      input,
    }),
    getSqrtRatioAtTick: (input: Query.Input_getSqrtRatioAtTick): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getSqrtRatioAtTick',
      input,
    }),
    getTickAtSqrtRatio: (input: Query.Input_getTickAtSqrtRatio): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getTickAtSqrtRatio',
      input,
    }),
    fetchToken: (input: Query.Input_fetchToken): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'fetchToken',
      input,
    }),
    fetchPoolFromTokens: (input: Query.Input_fetchPoolFromTokens): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'fetchPoolFromTokens',
      input,
    }),
    fetchPoolFromAddress: (input: Query.Input_fetchPoolFromAddress): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'fetchPoolFromAddress',
      input,
    }),
    fetchTickList: (input: Query.Input_fetchTickList): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'fetchTickList',
      input,
    }),
    feeAmountToTickSpacing: (input: Query.Input_feeAmountToTickSpacing): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'feeAmountToTickSpacing',
      input,
    }),
    getFeeAmount: (input: Query.Input_getFeeAmount): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getFeeAmount',
      input,
    }),
    getPermitV: (input: Query.Input_getPermitV): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'getPermitV',
      input,
    }),
    FACTORY_ADDRESS: (input: Query.Input_FACTORY_ADDRESS): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'FACTORY_ADDRESS',
      input,
    }),
    POOL_INIT_CODE_HASH: (input: Query.Input_POOL_INIT_CODE_HASH): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'POOL_INIT_CODE_HASH',
      input,
    }),
    POOL_INIT_CODE_HASH_OPTIMISM: (input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'POOL_INIT_CODE_HASH_OPTIMISM',
      input,
    }),
    POOL_INIT_CODE_HASH_OPTIMISM_KOVAN: (input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'POOL_INIT_CODE_HASH_OPTIMISM_KOVAN',
      input,
    }),
    MIN_TICK: (input: Query.Input_MIN_TICK): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'MIN_TICK',
      input,
    }),
    MAX_TICK: (input: Query.Input_MAX_TICK): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'MAX_TICK',
      input,
    }),
    MIN_SQRT_RATIO: (input: Query.Input_MIN_SQRT_RATIO): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'MIN_SQRT_RATIO',
      input,
    }),
    MAX_SQRT_RATIO: (input: Query.Input_MAX_SQRT_RATIO): InvokeApiOptions => ({
      uri: this.uri.toString(),
      module: 'query',
      method: 'MAX_SQRT_RATIO',
      input,
    }),
  }

  async currencyEquals(input: Query.Input_currencyEquals): Promise<boolean> {
    const options: InvokeApiOptions = this.config.currencyEquals(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async tokenEquals(input: Query.Input_tokenEquals): Promise<boolean> {
    const options: InvokeApiOptions = this.config.tokenEquals(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async tokenAmountEquals(input: Query.Input_tokenAmountEquals): Promise<boolean> {
    const options: InvokeApiOptions = this.config.tokenAmountEquals(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async tokenSortsBefore(input: Query.Input_tokenSortsBefore): Promise<boolean> {
    const options: InvokeApiOptions = this.config.tokenSortsBefore(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async getEther(input: Query.Input_getEther): Promise<Token> {
    const options: InvokeApiOptions = this.config.getEther(input)
    const result: InvokeApiResult<Token> = await this.client.invoke<Token>(options)
    return this.throwIfError(result)
  }

  async getWETH(input: Query.Input_getWETH): Promise<Token> {
    const options: InvokeApiOptions = this.config.getWETH(input)
    const result: InvokeApiResult<Token> = await this.client.invoke<Token>(options)
    return this.throwIfError(result)
  }

  async isEther(input: Query.Input_isEther): Promise<boolean> {
    const options: InvokeApiOptions = this.config.isEther(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async wrapToken(input: Query.Input_wrapToken): Promise<Token> {
    const options: InvokeApiOptions = this.config.wrapToken(input)
    const result: InvokeApiResult<Token> = await this.client.invoke<Token>(options)
    return this.throwIfError(result)
  }

  async wrapAmount(input: Query.Input_wrapAmount): Promise<TokenAmount> {
    const options: InvokeApiOptions = this.config.wrapAmount(input)
    const result: InvokeApiResult<TokenAmount> = await this.client.invoke<TokenAmount>(options)
    return this.throwIfError(result)
  }

  async createTickListDataProvider(input: Query.Input_createTickListDataProvider): Promise<TickListDataProvider> {
    const options: InvokeApiOptions = this.config.createTickListDataProvider(input)
    const result: InvokeApiResult<TickListDataProvider> = await this.client.invoke<TickListDataProvider>(options)
    return this.throwIfError(result)
  }

  async getTick(input: Query.Input_getTick): Promise<Tick> {
    const options: InvokeApiOptions = this.config.getTick(input)
    const result: InvokeApiResult<Tick> = await this.client.invoke<Tick>(options)
    return this.throwIfError(result)
  }

  async nextInitializedTickWithinOneWord(input: Query.Input_nextInitializedTickWithinOneWord): Promise<NextTickResult> {
    const options: InvokeApiOptions = this.config.nextInitializedTickWithinOneWord(input)
    const result: InvokeApiResult<NextTickResult> = await this.client.invoke<NextTickResult>(options)
    return this.throwIfError(result)
  }

  async createPool(input: Query.Input_createPool): Promise<Pool> {
    const options: InvokeApiOptions = this.config.createPool(input)
    const result: InvokeApiResult<Pool> = await this.client.invoke<Pool>(options)
    return this.throwIfError(result)
  }

  async getPoolAddress(input: Query.Input_getPoolAddress): Promise<string> {
    const options: InvokeApiOptions = this.config.getPoolAddress(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async poolInvolvesToken(input: Query.Input_poolInvolvesToken): Promise<boolean> {
    const options: InvokeApiOptions = this.config.poolInvolvesToken(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async poolToken0Price(input: Query.Input_poolToken0Price): Promise<Price> {
    const options: InvokeApiOptions = this.config.poolToken0Price(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async poolToken1Price(input: Query.Input_poolToken1Price): Promise<Price> {
    const options: InvokeApiOptions = this.config.poolToken1Price(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async poolPriceOf(input: Query.Input_poolPriceOf): Promise<Price> {
    const options: InvokeApiOptions = this.config.poolPriceOf(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async poolChainId(input: Query.Input_poolChainId): Promise<ChainId> {
    const options: InvokeApiOptions = this.config.poolChainId(input)
    const result: InvokeApiResult<ChainId> = await this.client.invoke<ChainId>(options)
    return this.throwIfError(result)
  }

  async getPoolOutputAmount(input: Query.Input_getPoolOutputAmount): Promise<PoolChangeResult> {
    const options: InvokeApiOptions = this.config.getPoolOutputAmount(input)
    const result: InvokeApiResult<PoolChangeResult> = await this.client.invoke<PoolChangeResult>(options)
    return this.throwIfError(result)
  }

  async getPoolInputAmount(input: Query.Input_getPoolInputAmount): Promise<PoolChangeResult> {
    const options: InvokeApiOptions = this.config.getPoolInputAmount(input)
    const result: InvokeApiResult<PoolChangeResult> = await this.client.invoke<PoolChangeResult>(options)
    return this.throwIfError(result)
  }

  async getPoolTickSpacing(input: Query.Input_getPoolTickSpacing): Promise<Int32> {
    const options: InvokeApiOptions = this.config.getPoolTickSpacing(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async createRoute(input: Query.Input_createRoute): Promise<Route> {
    const options: InvokeApiOptions = this.config.createRoute(input)
    const result: InvokeApiResult<Route> = await this.client.invoke<Route>(options)
    return this.throwIfError(result)
  }

  async routeChainId(input: Query.Input_routeChainId): Promise<ChainId> {
    const options: InvokeApiOptions = this.config.routeChainId(input)
    const result: InvokeApiResult<ChainId> = await this.client.invoke<ChainId>(options)
    return this.throwIfError(result)
  }

  async routeMidPrice(input: Query.Input_routeMidPrice): Promise<Price> {
    const options: InvokeApiOptions = this.config.routeMidPrice(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async createTradeExactIn(input: Query.Input_createTradeExactIn): Promise<Trade> {
    const options: InvokeApiOptions = this.config.createTradeExactIn(input)
    const result: InvokeApiResult<Trade> = await this.client.invoke<Trade>(options)
    return this.throwIfError(result)
  }

  async createTradeExactOut(input: Query.Input_createTradeExactOut): Promise<Trade> {
    const options: InvokeApiOptions = this.config.createTradeExactOut(input)
    const result: InvokeApiResult<Trade> = await this.client.invoke<Trade>(options)
    return this.throwIfError(result)
  }

  async createTradeFromRoute(input: Query.Input_createTradeFromRoute): Promise<Trade> {
    const options: InvokeApiOptions = this.config.createTradeFromRoute(input)
    const result: InvokeApiResult<Trade> = await this.client.invoke<Trade>(options)
    return this.throwIfError(result)
  }

  async createTradeFromRoutes(input: Query.Input_createTradeFromRoutes): Promise<Trade> {
    const options: InvokeApiOptions = this.config.createTradeFromRoutes(input)
    const result: InvokeApiResult<Trade> = await this.client.invoke<Trade>(options)
    return this.throwIfError(result)
  }

  async createUncheckedTrade(input: Query.Input_createUncheckedTrade): Promise<Trade> {
    const options: InvokeApiOptions = this.config.createUncheckedTrade(input)
    const result: InvokeApiResult<Trade> = await this.client.invoke<Trade>(options)
    return this.throwIfError(result)
  }

  async createUncheckedTradeWithMultipleRoutes(
    input: Query.Input_createUncheckedTradeWithMultipleRoutes
  ): Promise<Trade> {
    const options: InvokeApiOptions = this.config.createUncheckedTradeWithMultipleRoutes(input)
    const result: InvokeApiResult<Trade> = await this.client.invoke<Trade>(options)
    return this.throwIfError(result)
  }

  async tradeInputAmount(input: Query.Input_tradeInputAmount): Promise<TokenAmount> {
    const options: InvokeApiOptions = this.config.tradeInputAmount(input)
    const result: InvokeApiResult<TokenAmount> = await this.client.invoke<TokenAmount>(options)
    return this.throwIfError(result)
  }

  async tradeOutputAmount(input: Query.Input_tradeOutputAmount): Promise<TokenAmount> {
    const options: InvokeApiOptions = this.config.tradeOutputAmount(input)
    const result: InvokeApiResult<TokenAmount> = await this.client.invoke<TokenAmount>(options)
    return this.throwIfError(result)
  }

  async tradeExecutionPrice(input: Query.Input_tradeExecutionPrice): Promise<Price> {
    const options: InvokeApiOptions = this.config.tradeExecutionPrice(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async tradePriceImpact(input: Query.Input_tradePriceImpact): Promise<string> {
    const options: InvokeApiOptions = this.config.tradePriceImpact(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async tradeMinimumAmountOut(input: Query.Input_tradeMinimumAmountOut): Promise<TokenAmount> {
    const options: InvokeApiOptions = this.config.tradeMinimumAmountOut(input)
    const result: InvokeApiResult<TokenAmount> = await this.client.invoke<TokenAmount>(options)
    return this.throwIfError(result)
  }

  async tradeMaximumAmountIn(input: Query.Input_tradeMaximumAmountIn): Promise<TokenAmount> {
    const options: InvokeApiOptions = this.config.tradeMaximumAmountIn(input)
    const result: InvokeApiResult<TokenAmount> = await this.client.invoke<TokenAmount>(options)
    return this.throwIfError(result)
  }

  async tradeWorstExecutionPrice(input: Query.Input_tradeWorstExecutionPrice): Promise<Price> {
    const options: InvokeApiOptions = this.config.tradeWorstExecutionPrice(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async bestTradeExactIn(input: Query.Input_bestTradeExactIn): Promise<Array<Trade>> {
    const options: InvokeApiOptions = this.config.bestTradeExactIn(input)
    const result: InvokeApiResult<Array<Trade>> = await this.client.invoke<Array<Trade>>(options)
    return this.throwIfError(result)
  }

  async bestTradeExactOut(input: Query.Input_bestTradeExactOut): Promise<Array<Trade>> {
    const options: InvokeApiOptions = this.config.bestTradeExactOut(input)
    const result: InvokeApiResult<Array<Trade>> = await this.client.invoke<Array<Trade>>(options)
    return this.throwIfError(result)
  }

  async createPosition(input: Query.Input_createPosition): Promise<Position> {
    const options: InvokeApiOptions = this.config.createPosition(input)
    const result: InvokeApiResult<Position> = await this.client.invoke<Position>(options)
    return this.throwIfError(result)
  }

  async createPositionFromAmounts(input: Query.Input_createPositionFromAmounts): Promise<Position> {
    const options: InvokeApiOptions = this.config.createPositionFromAmounts(input)
    const result: InvokeApiResult<Position> = await this.client.invoke<Position>(options)
    return this.throwIfError(result)
  }

  async createPositionFromAmount0(input: Query.Input_createPositionFromAmount0): Promise<Position> {
    const options: InvokeApiOptions = this.config.createPositionFromAmount0(input)
    const result: InvokeApiResult<Position> = await this.client.invoke<Position>(options)
    return this.throwIfError(result)
  }

  async createPositionFromAmount1(input: Query.Input_createPositionFromAmount1): Promise<Position> {
    const options: InvokeApiOptions = this.config.createPositionFromAmount1(input)
    const result: InvokeApiResult<Position> = await this.client.invoke<Position>(options)
    return this.throwIfError(result)
  }

  async positionToken0PriceLower(input: Query.Input_positionToken0PriceLower): Promise<Price> {
    const options: InvokeApiOptions = this.config.positionToken0PriceLower(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async positionToken0PriceUpper(input: Query.Input_positionToken0PriceUpper): Promise<Price> {
    const options: InvokeApiOptions = this.config.positionToken0PriceUpper(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async positionAmount0(input: Query.Input_positionAmount0): Promise<TokenAmount> {
    const options: InvokeApiOptions = this.config.positionAmount0(input)
    const result: InvokeApiResult<TokenAmount> = await this.client.invoke<TokenAmount>(options)
    return this.throwIfError(result)
  }

  async positionAmount1(input: Query.Input_positionAmount1): Promise<TokenAmount> {
    const options: InvokeApiOptions = this.config.positionAmount1(input)
    const result: InvokeApiResult<TokenAmount> = await this.client.invoke<TokenAmount>(options)
    return this.throwIfError(result)
  }

  async mintAmounts(input: Query.Input_mintAmounts): Promise<MintAmounts> {
    const options: InvokeApiOptions = this.config.mintAmounts(input)
    const result: InvokeApiResult<MintAmounts> = await this.client.invoke<MintAmounts>(options)
    return this.throwIfError(result)
  }

  async mintAmountsWithSlippage(input: Query.Input_mintAmountsWithSlippage): Promise<MintAmounts> {
    const options: InvokeApiOptions = this.config.mintAmountsWithSlippage(input)
    const result: InvokeApiResult<MintAmounts> = await this.client.invoke<MintAmounts>(options)
    return this.throwIfError(result)
  }

  async burnAmountsWithSlippage(input: Query.Input_burnAmountsWithSlippage): Promise<MintAmounts> {
    const options: InvokeApiOptions = this.config.burnAmountsWithSlippage(input)
    const result: InvokeApiResult<MintAmounts> = await this.client.invoke<MintAmounts>(options)
    return this.throwIfError(result)
  }

  async swapCallParameters(input: Query.Input_swapCallParameters): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.swapCallParameters(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async encodeRouteToPath(input: Query.Input_encodeRouteToPath): Promise<string> {
    const options: InvokeApiOptions = this.config.encodeRouteToPath(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async encodePermit(input: Query.Input_encodePermit): Promise<string> {
    const options: InvokeApiOptions = this.config.encodePermit(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async encodeUnwrapWETH9(input: Query.Input_encodeUnwrapWETH9): Promise<string> {
    const options: InvokeApiOptions = this.config.encodeUnwrapWETH9(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async encodeSweepToken(input: Query.Input_encodeSweepToken): Promise<string> {
    const options: InvokeApiOptions = this.config.encodeSweepToken(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async encodeRefundETH(input: Query.Input_encodeRefundETH): Promise<string> {
    const options: InvokeApiOptions = this.config.encodeRefundETH(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async encodeMulticall(input: Query.Input_encodeMulticall): Promise<string> {
    const options: InvokeApiOptions = this.config.encodeMulticall(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async collectRewards(input: Query.Input_collectRewards): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.collectRewards(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async withdrawToken(input: Query.Input_withdrawToken): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.withdrawToken(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async encodeDeposit(input: Query.Input_encodeDeposit): Promise<string> {
    const options: InvokeApiOptions = this.config.encodeDeposit(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async quoteCallParameters(input: Query.Input_quoteCallParameters): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.quoteCallParameters(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async createCallParameters(input: Query.Input_createCallParameters): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.createCallParameters(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async addCallParameters(input: Query.Input_addCallParameters): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.addCallParameters(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async collectCallParameters(input: Query.Input_collectCallParameters): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.collectCallParameters(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async removeCallParameters(input: Query.Input_removeCallParameters): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.removeCallParameters(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async safeTransferFromParameters(input: Query.Input_safeTransferFromParameters): Promise<MethodParameters> {
    const options: InvokeApiOptions = this.config.safeTransferFromParameters(input)
    const result: InvokeApiResult<MethodParameters> = await this.client.invoke<MethodParameters>(options)
    return this.throwIfError(result)
  }

  async toHex(input: Query.Input_toHex): Promise<string> {
    const options: InvokeApiOptions = this.config.toHex(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async computePoolAddress(input: Query.Input_computePoolAddress): Promise<string> {
    const options: InvokeApiOptions = this.config.computePoolAddress(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async encodeSqrtRatioX96(input: Query.Input_encodeSqrtRatioX96): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.encodeSqrtRatioX96(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async mulDivRoundingUp(input: Query.Input_mulDivRoundingUp): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.mulDivRoundingUp(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async addDelta(input: Query.Input_addDelta): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.addDelta(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async maxLiquidityForAmounts(input: Query.Input_maxLiquidityForAmounts): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.maxLiquidityForAmounts(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async mostSignificantBit(input: Query.Input_mostSignificantBit): Promise<UInt32> {
    const options: InvokeApiOptions = this.config.mostSignificantBit(input)
    const result: InvokeApiResult<UInt32> = await this.client.invoke<UInt32>(options)
    return this.throwIfError(result)
  }

  async nearestUsableTick(input: Query.Input_nearestUsableTick): Promise<Int32> {
    const options: InvokeApiOptions = this.config.nearestUsableTick(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async tickToPrice(input: Query.Input_tickToPrice): Promise<Price> {
    const options: InvokeApiOptions = this.config.tickToPrice(input)
    const result: InvokeApiResult<Price> = await this.client.invoke<Price>(options)
    return this.throwIfError(result)
  }

  async priceToClosestTick(input: Query.Input_priceToClosestTick): Promise<Int32> {
    const options: InvokeApiOptions = this.config.priceToClosestTick(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async getAmount0Delta(input: Query.Input_getAmount0Delta): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.getAmount0Delta(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async getAmount1Delta(input: Query.Input_getAmount1Delta): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.getAmount1Delta(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async getNextSqrtPriceFromInput(input: Query.Input_getNextSqrtPriceFromInput): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.getNextSqrtPriceFromInput(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async getNextSqrtPriceFromOutput(input: Query.Input_getNextSqrtPriceFromOutput): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.getNextSqrtPriceFromOutput(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async validateTickList(input: Query.Input_validateTickList): Promise<boolean> {
    const options: InvokeApiOptions = this.config.validateTickList(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async tickIsBelowSmallest(input: Query.Input_tickIsBelowSmallest): Promise<boolean> {
    const options: InvokeApiOptions = this.config.tickIsBelowSmallest(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async tickIsAtOrAboveLargest(input: Query.Input_tickIsAtOrAboveLargest): Promise<boolean> {
    const options: InvokeApiOptions = this.config.tickIsAtOrAboveLargest(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async nextInitializedTick(input: Query.Input_nextInitializedTick): Promise<Tick> {
    const options: InvokeApiOptions = this.config.nextInitializedTick(input)
    const result: InvokeApiResult<Tick> = await this.client.invoke<Tick>(options)
    return this.throwIfError(result)
  }

  async tickListIsSorted(input: Query.Input_tickListIsSorted): Promise<boolean> {
    const options: InvokeApiOptions = this.config.tickListIsSorted(input)
    const result: InvokeApiResult<boolean> = await this.client.invoke<boolean>(options)
    return this.throwIfError(result)
  }

  async getSqrtRatioAtTick(input: Query.Input_getSqrtRatioAtTick): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.getSqrtRatioAtTick(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async getTickAtSqrtRatio(input: Query.Input_getTickAtSqrtRatio): Promise<Int32> {
    const options: InvokeApiOptions = this.config.getTickAtSqrtRatio(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async fetchToken(input: Query.Input_fetchToken): Promise<Token> {
    const options: InvokeApiOptions = this.config.fetchToken(input)
    const result: InvokeApiResult<Token> = await this.client.invoke<Token>(options)
    return this.throwIfError(result)
  }

  async fetchPoolFromTokens(input: Query.Input_fetchPoolFromTokens): Promise<Pool> {
    const options: InvokeApiOptions = this.config.fetchPoolFromTokens(input)
    const result: InvokeApiResult<Pool> = await this.client.invoke<Pool>(options)
    return this.throwIfError(result)
  }

  async fetchPoolFromAddress(input: Query.Input_fetchPoolFromAddress): Promise<Pool> {
    const options: InvokeApiOptions = this.config.fetchPoolFromAddress(input)
    const result: InvokeApiResult<Pool> = await this.client.invoke<Pool>(options)
    return this.throwIfError(result)
  }

  async fetchTickList(input: Query.Input_fetchTickList): Promise<Array<Tick>> {
    const options: InvokeApiOptions = this.config.fetchTickList(input)
    const result: InvokeApiResult<Array<Tick>> = await this.client.invoke<Array<Tick>>(options)
    return this.throwIfError(result)
  }

  async feeAmountToTickSpacing(input: Query.Input_feeAmountToTickSpacing): Promise<Int32> {
    const options: InvokeApiOptions = this.config.feeAmountToTickSpacing(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async getFeeAmount(input: Query.Input_getFeeAmount): Promise<UInt32> {
    const options: InvokeApiOptions = this.config.getFeeAmount(input)
    const result: InvokeApiResult<UInt32> = await this.client.invoke<UInt32>(options)
    return this.throwIfError(result)
  }

  async getPermitV(input: Query.Input_getPermitV): Promise<Int32> {
    const options: InvokeApiOptions = this.config.getPermitV(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async FACTORY_ADDRESS(input: Query.Input_FACTORY_ADDRESS): Promise<string> {
    const options: InvokeApiOptions = this.config.FACTORY_ADDRESS(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async POOL_INIT_CODE_HASH(input: Query.Input_POOL_INIT_CODE_HASH): Promise<string> {
    const options: InvokeApiOptions = this.config.POOL_INIT_CODE_HASH(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async POOL_INIT_CODE_HASH_OPTIMISM(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM): Promise<string> {
    const options: InvokeApiOptions = this.config.POOL_INIT_CODE_HASH_OPTIMISM(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async POOL_INIT_CODE_HASH_OPTIMISM_KOVAN(input: Query.Input_POOL_INIT_CODE_HASH_OPTIMISM_KOVAN): Promise<string> {
    const options: InvokeApiOptions = this.config.POOL_INIT_CODE_HASH_OPTIMISM_KOVAN(input)
    const result: InvokeApiResult<string> = await this.client.invoke<string>(options)
    return this.throwIfError(result)
  }

  async MIN_TICK(input: Query.Input_MIN_TICK): Promise<Int32> {
    const options: InvokeApiOptions = this.config.MIN_TICK(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async MAX_TICK(input: Query.Input_MAX_TICK): Promise<Int32> {
    const options: InvokeApiOptions = this.config.MAX_TICK(input)
    const result: InvokeApiResult<Int32> = await this.client.invoke<Int32>(options)
    return this.throwIfError(result)
  }

  async MIN_SQRT_RATIO(input: Query.Input_MIN_SQRT_RATIO): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.MIN_SQRT_RATIO(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  async MAX_SQRT_RATIO(input: Query.Input_MAX_SQRT_RATIO): Promise<BigInt> {
    const options: InvokeApiOptions = this.config.MAX_SQRT_RATIO(input)
    const result: InvokeApiResult<BigInt> = await this.client.invoke<BigInt>(options)
    return this.throwIfError(result)
  }

  private throwIfError<T>(result: InvokeApiResult<T>): T {
    if (result.error) {
      throw result.error
    }
    if (result.data === undefined) {
      throw Error(`Polywrap client returned 'undefined', but no errors were detected`)
    }
    return result.data
  }
}
