// NOTE: This is generated by 'w3 codegen', DO NOT MODIFY

// @ts-noCheck
import {
  UInt,
  UInt8,
  UInt16,
  UInt32,
  Int,
  Int8,
  Int16,
  Int32,
  Bytes,
  BigInt,
  Json,
  String,
  Boolean
} from "../baseTypes";
import {
  Currency,
  Token,
  Route,
  Tick,
  TickListDataProvider,
  Pool,
  Trade,
  TokenAmount,
  TradeSwap,
  Price,
  SwapOptions,
  PermitOptions,
  FeeOptions,
  MethodParameters,
  GasOptions,
  NextTickResult,
  PoolChangeResult,
  TradeRoute,
  IncentiveKey,
  ClaimOptions,
  FullWithdrawOptions,
  QuoteOptions,
  CommonAddLiquidityOptions,
  AddLiquidityOptions,
  SafeTransferOptions,
  CollectOptions,
  NFTPermitOptions,
  RemoveLiquidityOptions,
  BestTradeOptions,
  Position,
  MintAmounts,
  ChainIdEnum,
  ChainIdString,
  ChainId,
  FeeAmountEnum,
  FeeAmountString,
  FeeAmount,
  TradeTypeEnum,
  TradeTypeString,
  TradeType,
  PermitVEnum,
  PermitVString,
  PermitV,
  RoundingEnum,
  RoundingString,
  Rounding,
  Ethereum_Connection,
  Ethereum_TxOverrides,
  Ethereum_TxResponse,
  Ethereum_Access,
  Ethereum_TxReceipt,
  Ethereum_Log,
  Ethereum_TxRequest,
  Ethereum_StaticTxResult,
  Ethereum_EventNotification,
  Ethereum_Network,
  ERC20_Ethereum_Connection,
  Ethereum_Mutation,
  Ethereum_Query,
  SHA3_Query,
  EthersSolidity_Query,
  ERC20_Query,
  Subgraph_Query,
} from "./types";
import { Client, Uri, ExtensionInvocation, InvokeApiOptions } from "@web3api/core-js";

import * as Mutation from "./mutationTypes";

export interface UniswapMutationModule {
  swap(input: Mutation.Input_swap): ExtensionInvocation<Ethereum_TxResponse>;
  pool(input: Mutation.Input_pool): ExtensionInvocation<Ethereum_TxResponse>;
  execSwap(input: Mutation.Input_execSwap): ExtensionInvocation<Ethereum_TxResponse>;
  execPool(input: Mutation.Input_execPool): ExtensionInvocation<Ethereum_TxResponse>;
  execCall(input: Mutation.Input_execCall): ExtensionInvocation<Ethereum_TxResponse>;
  approve(input: Mutation.Input_approve): ExtensionInvocation<Ethereum_TxResponse>;
}

export class UniswapMutationExtension implements UniswapMutationModule {

  private client: Client;
  private uri: Uri;

  constructor(client: Client, uri: Uri) {
    this.client = client;
    this.uri = uri;
  }

  swap(
    input: Mutation.Input_swap,
  ): ExtensionInvocation<Ethereum_TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "swap",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Ethereum_TxResponse>(options),
    };
  }

  pool(
    input: Mutation.Input_pool,
  ): ExtensionInvocation<Ethereum_TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "pool",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Ethereum_TxResponse>(options),
    };
  }

  execSwap(
    input: Mutation.Input_execSwap,
  ): ExtensionInvocation<Ethereum_TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "execSwap",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Ethereum_TxResponse>(options),
    };
  }

  execPool(
    input: Mutation.Input_execPool,
  ): ExtensionInvocation<Ethereum_TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "execPool",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Ethereum_TxResponse>(options),
    };
  }

  execCall(
    input: Mutation.Input_execCall,
  ): ExtensionInvocation<Ethereum_TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "execCall",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Ethereum_TxResponse>(options),
    };
  }

  approve(
    input: Mutation.Input_approve,
  ): ExtensionInvocation<Ethereum_TxResponse> {
    const options: InvokeApiOptions = {
      uri: this.uri.toString(),
      module: "mutation",
      method: "approve",
      input: input
    };
    return {
      config: () => options,
      execute: async () => this.client.invoke<Ethereum_TxResponse>(options),
    };
  }

}
